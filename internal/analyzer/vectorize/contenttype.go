package vectorize

import (
	"crypto/rand"
	"math/big"

	log "github.com/sirupsen/logrus"

	"github.com/TheHackerDev/cartograph/internal/analyzer/vectorize/bagofwords"
)

// contentTypeMap is a map of content types to their index in the vector.
var contentTypeMap map[string]int

// weightContentTypeRequest is the weight of the content type in the request.
var weightContentTypeRequest float32 = 2.0

// weightContentTypeResponse is the weight of the content type in the response.
var weightContentTypeResponse float32 = 2.0

// init initializes the contentTypeMap, and runs before the main function.
func init() {
	contentTypeMap = make(map[string]int)
	for _, contentType := range bagofwords.MIMETypes {
		contentTypeMap[contentType] = 1
	}
}

// ContentTypes returns a weighted vectorized representation of the content types.
// There are two parts to this vector - the first half is for the content-type in the request,
// and the second half is for the content-type in the response.
func ContentTypes(requestContentTypes, responseContentTypes []string) []float32 {
	vector := make([]float32, len(bagofwords.MIMETypes)*2)

	for _, contentType := range requestContentTypes {
		if _, ok := contentTypeMap[contentType]; ok {
			vector[contentTypeMap[contentType]] = weightContentTypeRequest
		}
	}

	for _, contentType := range responseContentTypes {
		if _, ok := contentTypeMap[contentType]; ok {
			vector[contentTypeMap[contentType]+len(bagofwords.MIMETypes)] = weightContentTypeResponse
		}
	}

	return vector
}

// GenerateContentTypesVector generates a vector of content types for testing purposes.
// The vector is generated by randomly selecting one of the content types from the list of content types.
// There are two parts to this vector - the first half is for the content-type in the request,
// and the second half is for the content-type in the response.
func GenerateContentTypesVector() []float32 {
	vector := make([]float32, len(bagofwords.MIMETypes)*2)

	// Randomly select a content type to add to the vector
	index, randErrBig := rand.Int(rand.Reader, big.NewInt(int64(len(bagofwords.MIMETypes))))
	if randErrBig != nil {
		log.Fatal("Error generating random number for content type vector generation")
	}
	vector[index.Int64()] = weightContentTypeRequest

	// Randomly select a content type to add to the vector
	index, randErrBig = rand.Int(rand.Reader, big.NewInt(int64(len(bagofwords.MIMETypes))))
	if randErrBig != nil {
		log.Fatal("Error generating random number for content type vector generation")
	}
	vector[index.Int64()+int64(len(bagofwords.MIMETypes))] = weightContentTypeResponse

	return vector
}
