package vectorize

import (
	"crypto/rand"
	"math/big"

	log "github.com/sirupsen/logrus"

	"github.com/TheHackerDev/cartograph/internal/analyzer/vectorize/bagofwords"
)

// parameterkeys.go contains the code to vectorize URL parameter keys.

// paramKeysMap is a map of the parameter keys, where the value is the index in the vector.
var paramKeysMap map[string]int

// weightParameterKeys is the weight to assign to the parameter keys.
var weightParameterKeys float32 = 1.6

// init initializes the paramKeysMap, and runs before the main function.
func init() {
	// Convert the parameter keys to a map for faster lookup, where the value is the index in the vector.
	paramKeysMap = make(map[string]int, len(bagofwords.ParamKeys))
	for i, v := range bagofwords.ParamKeys {
		paramKeysMap[v] = i
	}
}

// UrlParamKeys converts the request parameter keys to a vector of 0s and 1s, where 1 indicates the parameter is
// present.
func UrlParamKeys(parameterKeys []string) []float32 {
	vector := make([]float32, len(bagofwords.ParamKeys))

	// Iterate through the parameters and set the vector value to 1 if the parameter is present.
	for _, key := range parameterKeys {
		if index, ok := paramKeysMap[key]; ok {
			vector[index] = weightParameterKeys
		}
	}

	return vector
}

// GenerateUrlParamKeysVector generates a vector of URL parameter keys for testing purposes.
// The vector is generated by randomly selecting a number of parameters from the list of parameters, up to the max
// number of parameters.
func GenerateUrlParamKeysVector() []float32 {
	maxParamsInVector := 10

	vector := make([]float32, len(bagofwords.ParamKeys))

	// Randomly select a number of parameters to add to the vector, up to the max number of parameters
	numParams, randErrSmall := rand.Int(rand.Reader, big.NewInt(int64(maxParamsInVector)))
	if randErrSmall != nil {
		log.Fatal("Error generating random number for URL parameter keys vector generation")
	}
	for i := int64(0); i < numParams.Int64(); i++ {
		// Randomly select a parameter to add to the vector
		index, randErrBig := rand.Int(rand.Reader, big.NewInt(int64(len(bagofwords.ParamKeys))))
		if randErrBig != nil {
			log.Fatal("Error generating random number for URL parameter keys vector generation")
		}
		vector[index.Int64()] = weightParameterKeys
	}

	return vector
}
