package vectorize

import (
	"crypto/rand"
	"math/big"
	"strings"

	log "github.com/sirupsen/logrus"

	"github.com/TheHackerDev/cartograph/internal/analyzer/vectorize/bagofwords"
)

// requestmethods.go contains the code to vectorize HTTP request methods.

// reqMethodsMap is a map of all possible HTTP request methods, where the key is the request method,
// and the value is the index of the request method in the vector.
var reqMethodsMap map[string]int

// init initializes the request methods map, and runs before the main function.
func init() {
	// Convert the slice of request methods into a map for fast lookup, where the key is the
	// request method, and the value is the index of the request method in the vector.
	reqMethodsMap = make(map[string]int, len(bagofwords.ReqMethods))
	for i, method := range bagofwords.ReqMethods {
		reqMethodsMap[method] = i
	}
}

// RequestMethod converts the given HTTP request methods into a vector.
func RequestMethod(requestMethods []string) []float32 {
	// Vectorize the request method
	vector := make([]float32, len(bagofwords.ReqMethods))
	for _, requestMethod := range requestMethods {
		if methodIndex, ok := reqMethodsMap[strings.ToUpper(requestMethod)]; ok {
			vector[methodIndex] = 1
		}
	}

	return vector
}

// GenerateRequestMethodVector generates a vector of request methods for testing purposes.
// The vector is generated by randomly selecting a number of request methods from the list of request methods, up to
// the max number of request methods. It uses a skewed list of request methods to generate the vector, where most
// vectors will only contain one or two request methods, and only a small number of vectors will contain three or more,
// up to five.
func GenerateRequestMethodVector() []float32 {
	vector := make([]float32, len(bagofwords.ReqMethods))

	// Randomly select a number of request methods to add to the vector, using a skewed distribution, up to 5
	num, randErrSmall := rand.Int(rand.Reader, big.NewInt(100))
	if randErrSmall != nil {
		log.Fatal("Error generating random number for request method vector generation")
	}
	numMethods := getNumMethodsForGenerator(int(num.Int64()))

	for i := 0; i < numMethods; i++ {
		// Randomly select a request method to add to the vector
		index, randErrBig := rand.Int(rand.Reader, big.NewInt(int64(len(bagofwords.ReqMethods))))
		if randErrBig != nil {
			log.Fatal("Error generating random number for request method vector generation")
		}
		vector[index.Int64()] = 1
	}

	return vector
}

// getNumMethodsForGenerator generates the number of methods in skewed distribution.
// This function generates number 1 with 50% probability, number 2 with 25% probability,
// number 3 with 15% probability, and numbers 4 and 5 each with 5% probability.
func getNumMethodsForGenerator(randInt int) int {
	switch {
	case randInt < 50:
		return 1
	case randInt < 75:
		return 2
	case randInt < 90:
		return 3
	case randInt < 95:
		return 4
	default:
		return 5
	}
}
