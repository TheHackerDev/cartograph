package vectorize

import (
	"crypto/rand"
	"math/big"

	log "github.com/sirupsen/logrus"

	"github.com/TheHackerDev/cartograph/internal/analyzer/vectorize/bagofwords"
)

// responsecodes.go contains the code to vectorize HTTP response codes.

// responseCodesMap is a map of all possible HTTP response codes, where the key is the response code,
// and the value is the index of the response code in the vector.
var responseCodesMap map[int]int

// init initializes the response codes map, and runs before the main function.
func init() {
	// Convert the slice of response codes into a map for fast lookup, where the key is the
	// response code, and the value is the index of the response code in the vector.
	responseCodesMap = make(map[int]int, len(bagofwords.ResponseCodes))
	for i, code := range bagofwords.ResponseCodes {
		responseCodesMap[code] = i
	}
}

// ResponseCode converts the given HTTP response codes into a vector.
func ResponseCode(respCodes []int) []float32 {
	// Vectorize the response codes
	vector := make([]float32, len(bagofwords.ResponseCodes))
	for _, respCode := range respCodes {
		if codeIndex, ok := responseCodesMap[respCode]; ok {
			vector[codeIndex] = 1
		}
	}

	return vector
}

// GenerateResponseCodeVector generates a vector of response codes for testing purposes.
// The vector is generated by randomly selecting a number of response codes from the list of response codes.
// It uses a skewed list of response codes to generate the vector, where most vectors will only contain one or
// two response codes, and only a small number of vectors will contain three or more, up to five.
func GenerateResponseCodeVector() []float32 {
	vector := make([]float32, len(bagofwords.ResponseCodes))

	// Randomly select a number of response codes to add to the vector, using a skewed distribution, up to 5
	num, randErrSmall := rand.Int(rand.Reader, big.NewInt(100))
	if randErrSmall != nil {
		log.Fatal("Error generating random number for response code vector generation")
	}

	numCodes := getNumCodesForGenerator(int(num.Int64()))

	for i := 0; i < numCodes; i++ {
		// Randomly select a response code to add to the vector
		codeIndex, randErrBig := rand.Int(rand.Reader, big.NewInt(int64(len(bagofwords.ResponseCodes))))
		if randErrBig != nil {
			log.Fatal("Error generating random number for response code vector generation")
		}

		vector[codeIndex.Int64()] = 1
	}

	return vector
}

// getNumCodesForGenerator returns the number of response codes to add to the vector, using a skewed distribution.
// This function generates number 1 with 70% probability, 2 with 25% probability, 3 with 2% probability, 4 with 2%
// probability, and 5 with 1% probability.
func getNumCodesForGenerator(num int) int {
	if num < 70 {
		return 1
	} else if num < 95 {
		return 2
	} else if num < 97 {
		return 3
	} else if num < 99 {
		return 4
	} else {
		return 5
	}
}
